// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SabidoMagroAcademia.Infra.Data.Context;

namespace SabidoMagroAcademia.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230415191309_update")]
    partial class update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Agachamento com barra"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Agachamento com halteres"
                        },
                        new
                        {
                            Id = 3,
                            Label = "Agachamento com kettlebell"
                        },
                        new
                        {
                            Id = 4,
                            Label = "Agachamento isométrico"
                        },
                        new
                        {
                            Id = 5,
                            Label = "Levantamento terra com barra"
                        },
                        new
                        {
                            Id = 6,
                            Label = "Levantamento terra com halteres"
                        },
                        new
                        {
                            Id = 7,
                            Label = "Puxada de peso com barra"
                        },
                        new
                        {
                            Id = 8,
                            Label = "Puxada de peso com halteres"
                        },
                        new
                        {
                            Id = 9,
                            Label = "Remada alta com barra"
                        },
                        new
                        {
                            Id = 10,
                            Label = "Remada alta com halteres"
                        },
                        new
                        {
                            Id = 11,
                            Label = "Remada baixa com barra"
                        },
                        new
                        {
                            Id = 12,
                            Label = "Remada baixa com halteres"
                        },
                        new
                        {
                            Id = 13,
                            Label = "Flexão de braço tradicional"
                        },
                        new
                        {
                            Id = 14,
                            Label = "Flexão de braço em diamante"
                        },
                        new
                        {
                            Id = 15,
                            Label = "Flexão de braço com as mãos afastadas"
                        },
                        new
                        {
                            Id = 16,
                            Label = "Flexão de braço em plyo"
                        },
                        new
                        {
                            Id = 17,
                            Label = "Flexão de braço com uma mão"
                        },
                        new
                        {
                            Id = 18,
                            Label = "Abdominal tradicional"
                        },
                        new
                        {
                            Id = 19,
                            Label = "Abdominal inverso"
                        },
                        new
                        {
                            Id = 20,
                            Label = "Abdominal oblíquo"
                        },
                        new
                        {
                            Id = 21,
                            Label = "Prancha tradicional"
                        },
                        new
                        {
                            Id = 22,
                            Label = "Prancha lateral"
                        },
                        new
                        {
                            Id = 23,
                            Label = "Prancha com elevação de perna"
                        },
                        new
                        {
                            Id = 24,
                            Label = "Prancha com rotação do tronco"
                        },
                        new
                        {
                            Id = 25,
                            Label = "Burpee tradicional"
                        },
                        new
                        {
                            Id = 26,
                            Label = "Burpee com elevação de perna"
                        },
                        new
                        {
                            Id = 27,
                            Label = "Burpee com flexão de braço"
                        },
                        new
                        {
                            Id = 28,
                            Label = "Burpee com salto"
                        },
                        new
                        {
                            Id = 29,
                            Label = "Corrida na esteira"
                        },
                        new
                        {
                            Id = 30,
                            Label = "Caminhada na esteira com inclinação"
                        },
                        new
                        {
                            Id = 31,
                            Label = "Ciclismo na bicicleta ergométrica"
                        },
                        new
                        {
                            Id = 32,
                            Label = "Remo na máquina de remo"
                        },
                        new
                        {
                            Id = 33,
                            Label = "Escalada na máquina de escalada"
                        },
                        new
                        {
                            Id = 34,
                            Label = "Step na plataforma"
                        },
                        new
                        {
                            Id = 35,
                            Label = "Jumping Jacks"
                        },
                        new
                        {
                            Id = 36,
                            Label = "Jump Squats"
                        },
                        new
                        {
                            Id = 37,
                            Label = "Lunge tradicional"
                        },
                        new
                        {
                            Id = 38,
                            Label = "Lunge com salto"
                        },
                        new
                        {
                            Id = 39,
                            Label = "Lunge lateral"
                        },
                        new
                        {
                            Id = 40,
                            Label = "Flexão plantar na máquina"
                        },
                        new
                        {
                            Id = 41,
                            Label = "Stiff com barra"
                        },
                        new
                        {
                            Id = 42,
                            Label = "Stiff com halteres"
                        },
                        new
                        {
                            Id = 43,
                            Label = "Cadeira extensora"
                        },
                        new
                        {
                            Id = 44,
                            Label = "Cadeira flexora"
                        },
                        new
                        {
                            Id = 45,
                            Label = "Leg Press"
                        },
                        new
                        {
                            Id = 46,
                            Label = "Agachamento sumô"
                        },
                        new
                        {
                            Id = 47,
                            Label = "Agachamento com salto"
                        },
                        new
                        {
                            Id = 48,
                            Label = "Elevação de panturrilha com barra"
                        },
                        new
                        {
                            Id = 49,
                            Label = "Elevação de panturrilha com halteres"
                        },
                        new
                        {
                            Id = 50,
                            Label = "Elevação posterior"
                        },
                        new
                        {
                            Id = 51,
                            Label = "Abdução de quadril na máquina"
                        },
                        new
                        {
                            Id = 52,
                            Label = "Adição de quadril na máquina"
                        },
                        new
                        {
                            Id = 53,
                            Label = "Flexão de perna na máquina"
                        },
                        new
                        {
                            Id = 54,
                            Label = "Extensão de perna na máquina"
                        },
                        new
                        {
                            Id = 55,
                            Label = "Rosca direta com barra"
                        },
                        new
                        {
                            Id = 56,
                            Label = "Rosca direta com halteres"
                        },
                        new
                        {
                            Id = 57,
                            Label = "Rosca inversa com barra"
                        },
                        new
                        {
                            Id = 58,
                            Label = "Rosca inversa com halteres"
                        },
                        new
                        {
                            Id = 59,
                            Label = "Rosca concentrada com halteres"
                        },
                        new
                        {
                            Id = 60,
                            Label = "Tríceps na barra paralela"
                        },
                        new
                        {
                            Id = 61,
                            Label = "Tríceps com halteres"
                        },
                        new
                        {
                            Id = 62,
                            Label = "Tríceps com corda"
                        },
                        new
                        {
                            Id = 63,
                            Label = "Flexão de antebraço com barra"
                        },
                        new
                        {
                            Id = 64,
                            Label = "Flexão de antebraço com halteres"
                        },
                        new
                        {
                            Id = 65,
                            Label = "Flexão de antebraço com corda"
                        },
                        new
                        {
                            Id = 66,
                            Label = "Remada alta com barra T"
                        },
                        new
                        {
                            Id = 67,
                            Label = "Remada alta com halteres T"
                        },
                        new
                        {
                            Id = 68,
                            Label = "Remada curvada com barra"
                        },
                        new
                        {
                            Id = 69,
                            Label = "Remada curvada com halteres"
                        },
                        new
                        {
                            Id = 70,
                            Label = "Desenvolvimento com barra"
                        },
                        new
                        {
                            Id = 71,
                            Label = "Desenvolvimento com halteres"
                        },
                        new
                        {
                            Id = 72,
                            Label = "Elevação lateral com halteres"
                        },
                        new
                        {
                            Id = 73,
                            Label = "Elevação frontal com halteres"
                        },
                        new
                        {
                            Id = 74,
                            Label = "Elevação frontal com barra"
                        });
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Avaliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("CoachsComments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Weight")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CoachId");

                    b.ToTable("Avaliations");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.ClientWorkout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("CoachId")
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CoachId");

                    b.ToTable("ClientWorkouts");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("smalldatetime");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PlanId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.DayOfTrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId1")
                        .HasColumnType("int");

                    b.Property<int?>("CoachId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Day")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientId1");

                    b.HasIndex("CoachId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("DayOfTrains");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.HasKey("Id");

                    b.ToTable("Plans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Plano pé rachado",
                            Price = 100.0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Plano Chique",
                            Price = 1000.0
                        });
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Born")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Fone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientWorkoutId")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientWorkoutId");

                    b.ToTable("Workouts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Treino para Parte Anterior da Perna"
                        });
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.WorkoutActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("Rest")
                        .HasColumnType("int");

                    b.Property<int>("Sets")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutActivity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 45,
                            Order = 1,
                            Reps = 10,
                            Rest = 1,
                            Sets = 3,
                            WorkoutId = 1
                        });
                });

            modelBuilder.Entity("SabidoMagroAcademia.Infra.Data.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SabidoMagroAcademia.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SabidoMagroAcademia.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SabidoMagroAcademia.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SabidoMagroAcademia.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Avaliation", b =>
                {
                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Client", "Client")
                        .WithMany("Avaliations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Manager", "Coach")
                        .WithMany("Avaliations")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Client", b =>
                {
                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Plan", null)
                        .WithMany("Clients")
                        .HasForeignKey("PlanId");

                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Resource", null)
                        .WithMany("Clients")
                        .HasForeignKey("ResourceId");

                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Role", null)
                        .WithMany("Clients")
                        .HasForeignKey("RoleId");

                    b.HasOne("SabidoMagroAcademia.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Workout", null)
                        .WithMany("Clients")
                        .HasForeignKey("WorkoutId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.ClientWorkout", b =>
                {
                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Client", "Client")
                        .WithMany("ClientWorkouts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Manager", "Coach")
                        .WithMany("ClientWorkouts")
                        .HasForeignKey("CoachId");

                    b.Navigation("Client");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Contract", b =>
                {
                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.DayOfTrain", b =>
                {
                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Client", null)
                        .WithMany("DayOfTrains")
                        .HasForeignKey("ClientId");

                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId1");

                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Manager", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Workout", "WorkoutInDay")
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Coach");

                    b.Navigation("WorkoutInDay");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Manager", b =>
                {
                    b.HasOne("SabidoMagroAcademia.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Resource", b =>
                {
                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Role", null)
                        .WithMany("Resources")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Role", b =>
                {
                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Manager", null)
                        .WithMany("Roles")
                        .HasForeignKey("ManagerId");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Workout", b =>
                {
                    b.HasOne("SabidoMagroAcademia.Domain.Entities.ClientWorkout", null)
                        .WithMany("WorkoutDefaults")
                        .HasForeignKey("ClientWorkoutId");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.WorkoutActivity", b =>
                {
                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SabidoMagroAcademia.Domain.Entities.Workout", "Workout")
                        .WithMany("WorkoutActivities")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Client", b =>
                {
                    b.Navigation("Avaliations");

                    b.Navigation("ClientWorkouts");

                    b.Navigation("DayOfTrains");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.ClientWorkout", b =>
                {
                    b.Navigation("WorkoutDefaults");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Manager", b =>
                {
                    b.Navigation("Avaliations");

                    b.Navigation("ClientWorkouts");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Plan", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Resource", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Role", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("SabidoMagroAcademia.Domain.Entities.Workout", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("WorkoutActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
